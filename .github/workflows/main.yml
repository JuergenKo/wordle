name: Build Android APK

on:
  push:
    branches: [ "main" ]
  release:
    types: [published]

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Java 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Install system dependencies
      run: |
        sudo apt-get update -y
        sudo apt-get install -y git zip unzip python3 python3-pip python3-venv \
          python3-setuptools autoconf libtool pkg-config zlib1g-dev \
          libncurses5-dev libncursesw5-dev libtinfo5 cmake libffi-dev libssl-dev

    - name: Set up Python virtual environment
      run: |
        python3 -m venv venv
        echo "VIRTUAL_ENV=$PWD/venv" >> $GITHUB_ENV
        echo "PATH=$PWD/venv/bin:$PATH" >> $GITHUB_ENV

    - name: Install Buildozer and Cython
      run: |
        pip install --upgrade pip
        pip install cython==0.29.33 buildozer

    - name: Accept Android SDK licenses
      run: |
        yes | $HOME/.buildozer/android/platform/android-sdk/tools/bin/sdkmanager --licenses || true

    - name: Ensure data files exist
      run: |
        mkdir -p data
        # solutions.txt
        if [ ! -f "data/solutions.txt" ]; then
          echo "HELLO" > data/solutions.txt
          echo "WORLD" >> data/solutions.txt
          echo "TEST" >> data/solutions.txt
          echo "WORDLE" >> data/solutions.txt
        fi
        # words_choose.txt
        if [ ! -f "data/words_choose.txt" ]; then
          echo "CHOOSE" > data/words_choose.txt
          echo "WORDS" >> data/words_choose.txt
          echo "HERE" >> data/words_choose.txt
        fi
        echo "✅ Data files ready:"
        ls -la data/

    - name: Patch buildozer.spec
      run: |
        if [ -f "buildozer.spec" ]; then
          cp buildozer.spec buildozer.spec.backup
          # Include data files in APK
          if ! grep -q "^source.include_patterns" buildozer.spec; then
            echo "source.include_patterns = data/*.txt, data/*.json" >> buildozer.spec
          fi
          # Use stable build-tools
          sed -i '/^#android.build_tools_version/ s/^#//' buildozer.spec || true
          echo "android.build_tools_version = 36.0.3" >> buildozer.spec
          echo "android.accept_sdk_license = True" >> buildozer.spec
        else
          echo "❌ buildozer.spec not found!"
        fi

    - name: Clean buildozer caches
      run: |
        buildozer android clean || true
        rm -rf .buildozer
        rm -rf bin
        rm -rf ~/.buildozer/android/platform/build-*
        
    - name: Patch KivMob for new Ads SDK
      run: |
        KIVMOB_PATH=$(python -c "import site; print(site.getsitepackages()[0])")/kivmob.py
        echo "Patching $KIVMOB_PATH"
        # Fix MobileAds.initialize() call (remove app_id arg)
        sed -i "s/MobileAds.initialize(activity, app_id)/MobileAds.initialize(activity)/" $KIVMOB_PATH
        # Ensure _test_devices always exists
        sed -i "s/self._test_devices = test_devices/self._test_devices = []/" $KIVMOB_PATH

    - name: Build the APK
      run: |
        buildozer -v android debug

    - name: Verify APK contents
      run: |
        APK_FILE=$(find . -name "*.apk" -type f | head -1)
        if [ -z "$APK_FILE" ]; then
          echo "No APK file found"
          exit 0
        fi
        echo "APK file: $APK_FILE"
        mkdir -p apk_analysis
        unzip -q "$APK_FILE" -d apk_analysis
        echo "=== assets/ contents ==="
        find apk_analysis/assets -type f
        echo "=== txt files in APK ==="
        find apk_analysis -name "*.txt"

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: wordle-apk
        path: bin/*.apk
        if-no-files-found: warn

    - name: Upload APK analysis
      uses: actions/upload-artifact@v4
      with:
        name: apk-analysis
        path: apk_analysis/
        if-no-files-found: warn
