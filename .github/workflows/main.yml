name: Build Android APK

on:
  push:
    branches: [ "main" ]
  release:
    types: [published]

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Debug - List repository files
      run: |
        echo "=== Repository Structure ==="
        ls -la
        echo "=== data/ directory ==="
        ls -la data/ || echo "data/ directory does not exist"
        echo "=== kv/ directory ==="
        ls -la kv/ || echo "kv/ directory does not exist"

    - name: Install system dependencies
      run: |
        sudo apt-get update -y
        sudo apt-get install -y git zip unzip openjdk-17-jdk python3 python3-pip python3-venv python3-setuptools autoconf libtool pkg-config zlib1g-dev libncurses5-dev libncursesw5-dev libtinfo5 cmake libffi-dev libssl-dev

    - name: Set up Python Virtual Environment
      run: |
        python3 -m venv venv
        source venv/bin/activate
        echo "VIRTUAL_ENV=$VIRTUAL_ENV" >> $GITHUB_ENV
        echo "PATH=$VIRTUAL_ENV/bin:$PATH" >> $GITHUB_ENV

    - name: Install specific compatible versions
      run: |
        source venv/bin/activate
        pip install "cython==0.29.33"
        pip install "buildozer==1.5.0"
        pip install "setuptools==65.5.0"

    - name: Verify source files are accessible
      run: |
        source venv/bin/activate
        echo "=== Ensuring source files are accessible ==="
        if [ ! -f "main.py" ]; then
          echo "ERROR: main.py not found in root directory!"
          ls -la *.py || echo "No Python files found"
          exit 1
        fi
        echo "main.py found successfully"
        
        if [ ! -d "data" ]; then
          echo "ERROR: data/ directory not found!"
          exit 1
        fi
        echo "data/ directory found"
        
        if [ ! -d "kv" ]; then
          echo "ERROR: kv/ directory not found!"
          exit 1
        fi
        echo "kv/ directory found"

    - name: Build the APK with manual recovery
      run: |
        source venv/bin/activate
        echo "=== Starting the build process ==="
        
        # Try the normal build first
        buildozer -v android debug 2>&1 | tee build.log || echo "Build may have failed, checking for partial success"
        
        # If gradlew failed, try to run it manually with more memory
        if grep -q "gradlew failed" build.log; then
          echo "=== Gradle failed, attempting manual recovery ==="
          cd .buildozer/android/platform/build-arm64-v8a_armeabi-v7a/dists/wordle
          chmod +x gradlew
          # Try with more memory allocation
          ./gradlew clean assembleDebug -Dorg.gradle.jvmargs="-Xmx2048m" 2>&1 | tee gradle.log || echo "Gradle build may have failed"
          cd ../../../../..
        fi
        
        # Check if APK was created despite possible failures
        echo "=== Searching for APK files ==="
        find . -name "*.apk" -type f 2>/dev/null | head -10 || echo "No APK files found in search"
        
        # Specifically check the build outputs directory
        if [ -d ".buildozer/android/platform/build-arm64-v8a_armeabi-v7a/dists/wordle/build/outputs/apk" ]; then
          echo "=== Checking Gradle build outputs ==="
          ls -la .buildozer/android/platform/build-arm64-v8a_armeabi-v7a/dists/wordle/build/outputs/apk/ || echo "Cannot list apk outputs"
          # Copy any found APK to the bin directory
          cp .buildozer/android/platform/build-arm64-v8a_armeabi-v7a/dists/wordle/build/outputs/apk/*.apk bin/ 2>/dev/null || echo "No APK to copy"
        fi
        
        # Check the bin directory
        if [ -d "bin" ]; then
          echo "=== Contents of bin/ directory ==="
          ls -la bin/ || echo "bin directory exists but cannot list contents"
        fi

    - name: Upload APK artifact if exists
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: wordle-apk
        path: |
          bin/*.apk
          .buildozer/android/platform/build-arm64-v8a_armeabi-v7a/dists/wordle/build/outputs/apk/*.apk
          *.apk
        if-no-files-found: ignore

    - name: Upload build logs for debugging
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: |
          build.log
          gradle.log
          .buildozer/
        if-no-files-found: warn

    - name: Check build status and provide summary
      if: always()
      run: |
        echo "=== Build Status Summary ==="
        if find . -name "*.apk" -type f 2>/dev/null | grep -q .; then
          echo "✅ SUCCESS: APK file was created!"
          echo "APK files found:"
          find . -name "*.apk" -type f 2>/dev/null
          exit 0
        else
          echo "❌ BUILD FAILED: No APK file was produced"
          echo "The build failed during the Gradle packaging step."
          echo "Check the build.log and gradle.log for details."
          exit 1
        fi
