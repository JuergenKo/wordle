name: Build Android APK

on:
  push:
    branches: [ "main" ]
  release:
    types: [published]

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install system dependencies
      run: |
        sudo apt-get update -y
        sudo apt-get install -y git zip unzip openjdk-17-jdk python3 python3-pip python3-venv python3-setuptools autoconf libtool pkg-config zlib1g-dev libncurses5-dev libncursesw5-dev libtinfo5 cmake libffi-dev libssl-dev

    - name: Set up Python Virtual Environment
      run: |
        python3 -m venv venv
        source venv/bin/activate
        echo "VIRTUAL_ENV=$VIRTUAL_ENV" >> $GITHUB_ENV
        echo "PATH=$VIRTUAL_ENV/bin:$PATH" >> $GITHUB_ENV

    - name: Install Buildozer
      run: |
        source venv/bin/activate
        pip install buildozer

    - name: Build the APK
      run: |
        source venv/bin/activate
        echo "=== Starting the build process ==="
        buildozer -v android debug

    - name: Verify APK contents
      run: |
        source venv/bin/activate
        echo "=== Verifying APK contents ==="
        
        # Find the APK file
        APK_FILE=$(find . -name "*.apk" -type f | head -1)
        if [ -z "$APK_FILE" ]; then
          echo "❌ No APK file found!"
          exit 1
        fi
        
        echo "APK file: $APK_FILE"
        
        # List all files in the APK
        echo "=== Files in APK ==="
        unzip -l "$APK_FILE" | head -20
        
        # Check specifically for solutions.txt
        echo "=== Checking for solutions.txt ==="
        if unzip -l "$APK_FILE" | grep -q "solutions.txt"; then
          echo "✅ solutions.txt is in the APK!"
          unzip -l "$APK_FILE" | grep "solutions.txt"
        else
          echo "❌ solutions.txt is NOT in the APK!"
          echo "Files containing 'txt':"
          unzip -l "$APK_FILE" | grep "\.txt" || echo "No .txt files found"
        fi
        
        # Check for other important files
        echo "=== Checking for other data files ==="
        unzip -l "$APK_FILE" | grep -E "(\.txt|\.json|\.kv|data/)" | head -10 || echo "No data files found"

    - name: Extract and inspect assets from APK
      run: |
        source venv/bin/activate
        echo "=== Extracting assets from APK for inspection ==="
        
        APK_FILE=$(find . -name "*.apk" -type f | head -1)
        if [ -z "$APK_FILE" ]; then
          echo "No APK file found for extraction"
          exit 0
        fi
        
        # Create temp directory for extraction
        EXTRACT_DIR="apk_contents"
        mkdir -p "$EXTRACT_DIR"
        
        # Extract the APK
        unzip -q "$APK_FILE" -d "$EXTRACT_DIR"
        
        echo "=== APK structure ==="
        find "$EXTRACT_DIR" -type f -name "*.txt" -o -name "*.json" -o -name "*.kv" | head -20
        
        echo "=== assets/ directory contents ==="
        if [ -d "$EXTRACT_DIR/assets" ]; then
          find "$EXTRACT_DIR/assets" -type f | head -20
          echo "=== Checking for solutions.txt in assets ==="
          find "$EXTRACT_DIR/assets" -name "solutions.txt" -type f
        else
          echo "No assets directory found"
        fi
        
        echo "=== res/ directory contents ==="
        if [ -d "$EXTRACT_DIR/res" ]; then
          find "$EXTRACT_DIR/res" -type f | head -10
        fi

    - name: Upload APK artifact
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: wordle-apk
        path: bin/*.apk
        if-no-files-found: warn

    - name: Upload APK contents report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: apk-contents-report
        path: |
          apk_contents/
        if-no-files-found: warn

    - name: Upload build logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: |
          .buildozer/
        if-no-files-found: warn
